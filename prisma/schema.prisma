// Migration prisma example
// npx prisma migrate dv -n MIGRATION_NAME

// Reset data from db
// npx prisma migrate reset
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  passwordHash    String?
  image           String?
  profileComplete Boolean   @default(false)
  role            Role      @default(MEMBER)
  accounts        Account[]
  member          Member?
}

model Member {
  id                String    @id @default(cuid())
  userId            String    @unique
  name              String
  gender            String
  dateOfBirth       DateTime
  created           DateTime  @default(now())
  updated           DateTime  @default(now())
  description       String
  city              String
  country           String
  image             String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos            Photo[]
  sourceLikes       Like[]    @relation("source")
  targetLikes       Like[]    @relation("target")
  senderMessages    Message[] @relation("sender")
  recipientMessages Message[] @relation("recipient")
}

model Photo {
  id         String  @id @default(cuid())
  url        String
  publicId   String? @unique
  isApproved Boolean @default(false)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Like {
  sourceUserId String
  sourceMember Member @relation("source", fields: [sourceUserId], references: [userId], onDelete: Cascade)

  targetUserId String
  targetMember Member @relation("target", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId, targetUserId])
}

model Message {
  id               String    @id @default(cuid())
  text             String
  created          DateTime  @default(now())
  senderId         String?
  recipientId      String?
  sender           Member?   @relation("sender", fields: [senderId], references: [userId], onDelete: SetNull)
  recipient        Member?   @relation("recipient", fields: [recipientId], references: [userId], onDelete: SetNull)
  dateRead         DateTime?
  senderDeleted    Boolean   @default(false)
  recipientDeleted Boolean   @default(false)
}

model Token {
  id      String    @id @default(cuid())
  email   String
  token   String
  expires DateTime
  type    TokenType

  @@unique([email, token])
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}

enum Role {
  ADMIN
  MEMBER
}
